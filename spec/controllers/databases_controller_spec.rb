require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe DatabasesController do
  render_views

  describe "rendering" do
    before(:each) do
      @database = Factory(:database)
    end

    it "index action should render index template" do
      get :index
      response.should render_template(:index)
    end

    it "show action should render show template" do
      get :show, :id => @database
      response.should render_template(:show)
    end

    it "new action should render new template" do
      get :new
      response.should render_template(:new)
    end

    it "edit action should render edit template" do
      get :edit, :id => @database
      response.should render_template(:edit)
    end
  end

  describe "GET show" do
    before(:each) do
      @database = Factory(:database)
    end

    it "should be successful" do
      get :show, :id => @database
      response.should be_success
    end

    it "should find the right database" do
      get :show, :id => @database
      @database.name = "Shoud"
      assigns(:database).should be_eql(@database)
    end

    it "should have the right title" do
      get :show, :id => @database
      response.should have_selector('title', :content => @database.name)
    end

    it "should have the database's name" do
      get :show, :id => @database
      response.should have_selector('h1', :content => @database.name)
    end

    it "should have the database's port" do
      get :show, :id => @database
      response.should have_selector('h3', :content => @database.formatted_jdbc_string)
    end
  end

  describe "POST create" do
    describe "failure" do
      before(:each) do
        @database = Factory.attributes_for(:database, :name => "")
      end

      it "should not create a database" do
        lambda { post :create, :database => @database }.should_not change(Database, :count)
      end

      it "should re-render database page" do
        post :create, :database => @database
        response.should render_template(:new)
      end

      it "should shows a failure error" do
        post :create, :database => @database

        response.should have_selector('h2', :content => "prohibited" )

        assigns(:database).errors.full_messages.each do |msg| 
          response.should have_selector('li', :content => msg)
        end
      end
    end

    describe "success" do
      before(:each) do
        @instance = Factory(:instance)
        @database = Factory.attributes_for(:database, :instance => @instance)
      end

      it "should create a database" do
        lambda { post :create, :database => @database }.should change(Database, :count).by(1)
      end

      it "should redirect_to database page" do
        post :create, :database => @database
        response.should redirect_to(database_path(assigns(:database)))
      end

      it "should have a flash message" do
        post :create, :database => @database
        flash[:notice] = 'Database was successfully created'
      end
    end
  end

  describe "PUT update" do
    before(:each) do
      @database = Factory(:database)
    end

    describe "failure" do
      before(:each) do
        @database_attr = { :name => nil, :description => nil }
      end

      it "should render the 'edit' page" do
        put :update, :id => @database, :database => @database_attr
        response.should render_template(:edit)
      end
    end

    describe "success" do
      before(:each) do
        @database_attr = { :name => "My New Database Name", :description => "My cool description"  }
      end

      it "should change the database's attributes" do
        put :update, :id => @database, :database => @database_attr

        @database.reload

        @database.name.should be_eql(@database_attr[:name])
        @database.description.should be_eql(@database_attr[:description])
      end

      it "should have a flash message" do
        put :update, :id => @database, :database => @database_attr
        flash[:notice].should =~ /successfully updated/
      end
    end
  end

  describe "DELETE 'destroy'" do
    before(:each) do
      @database = Factory(:database)
    end

    it "should destroy the database" do
      lambda do
        delete :destroy, :id => @database
      end.should change(Database, :count).by(-1)
    end

    it "should redirect to the databases page with a flash notice" do
      delete :destroy, :id => @database
      flash[:notice].should =~ /destroyed/i
      response.should redirect_to(databases_path)
    end
  end
end
